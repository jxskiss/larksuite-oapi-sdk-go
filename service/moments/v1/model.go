// Code generated by lark suite oapi sdk gen
package v1
import (
    "github.com/larksuite/oapi-sdk-go/api/core/tools"
)
type Category struct {
    Id  string `json:"id,omitempty"`
    Name  string `json:"name,omitempty"`
    Description  string `json:"description,omitempty"`
    CreateTime  string `json:"create_time,omitempty"`
    PostCount  int `json:"post_count,omitempty"`
    ParticipantCount  int `json:"participant_count,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Category) MarshalJSON() ([]byte, error) {
	type cp Category
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Comment struct {
    UserId  string `json:"user_id,omitempty"`
    Content  string `json:"content,omitempty"`
    ImageKey  string `json:"image_key,omitempty"`
    IsHot  bool `json:"is_hot,omitempty"`
    ReactionSet  *ReactionSet `json:"reaction_set,omitempty"`
    Id  string `json:"id,omitempty"`
    CreateTime  string `json:"create_time,omitempty"`
    PostId  string `json:"post_id,omitempty"`
    ReplyCommentId  string `json:"reply_comment_id,omitempty"`
    RootCommentId  string `json:"root_comment_id,omitempty"`
    Cid  string `json:"cid,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Comment) MarshalJSON() ([]byte, error) {
	type cp Comment
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Post struct {
    UserId  string `json:"user_id,omitempty"`
    Content  string `json:"content,omitempty"`
    ImageKeyList  []string `json:"image_key_list,omitempty"`
    MediaFileToken  string `json:"media_file_token,omitempty"`
    CommentCount  int `json:"comment_count,omitempty"`
    ReactionSet  *ReactionSet `json:"reaction_set,omitempty"`
    Id  string `json:"id,omitempty"`
    CreateTime  string `json:"create_time,omitempty"`
    MediaCoverImageKey  string `json:"media_cover_image_key,omitempty"`
    Cid  string `json:"cid,omitempty"`
    CategoryIds  []string `json:"category_ids,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Post) MarshalJSON() ([]byte, error) {
	type cp Post
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Reaction struct {
    Type  string `json:"type,omitempty"`
    UserId  string `json:"user_id,omitempty"`
    EntityId  string `json:"entity_id,omitempty"`
    Id  string `json:"id,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Reaction) MarshalJSON() ([]byte, error) {
	type cp Reaction
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type ReactionList struct {
    Type  string `json:"type,omitempty"`
    Count  int `json:"count,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *ReactionList) MarshalJSON() ([]byte, error) {
	type cp ReactionList
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type ReactionSet struct {
    Reactions  []*ReactionList `json:"reactions,omitempty"`
    TotalCount  int `json:"total_count,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *ReactionSet) MarshalJSON() ([]byte, error) {
	type cp ReactionSet
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}




type CommentCreateResult struct {
    Comment  *Comment `json:"comment,omitempty"`
}


type PostCreateResult struct {
    Post  *Post `json:"post,omitempty"`
}


type ReactionCreateResult struct {
    Reaction  *Reaction `json:"reaction,omitempty"`
}








type CommentGetResult struct {
    Comment  *Comment `json:"comment,omitempty"`
}


type PostGetResult struct {
    Post  *Post `json:"post,omitempty"`
}


type CategoryListResult struct {
    Items  []*Category `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


type CommentListResult struct {
    Items  []*Comment `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


type PostListResult struct {
    Items  []*Post `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


type ReactionListResult struct {
    Items  []*Reaction `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


